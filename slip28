//C-LOOK
#include<stdio.h>
#include<stdlib.h>
int main()
{
        int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move;
	printf("Enter the number of Requests:-\n"); 
	scanf("%d",&n);
	printf("Enter the Requests sequence:-\n");
	for(i=0;i<n;i++) scanf("%d",&RQ[i]);
	printf("Enter initial head position:-\n");
	scanf("%d",&initial); 
	printf("Entertotal disk size:-\n"); 
	scanf("%d",&size);
	printf("Enter the head movement direction for high 1 and for low 0:-\n");
	scanf("%d",&move);
	for(i=0;i<n;i++)
	{
		for( j=0;j<n-i-1;j++)
		{
			if(RQ[j]>RQ[j+1])
			{
				int temp;
				temp=RQ[j];
				RQ[j]=RQ[j+1];
				RQ[j+1]=temp;
			}
		}
	}
	int index;
	for(i=0;i<n;i++)
	{
		if(initial<RQ[i])
		{
			index=i;
			break;
		}
	}
	if(move==1)
	{
		for(i=index;i<n;i++)
		{
			TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
			initial=RQ[i];
		}
		for( i=0;i<index;i++)
		{
			TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
			initial=RQ[i];

		}
	}
	else
	{
		for(i=index-1;i>=0;i--)
		{
			TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
			initial=RQ[i];
		}
		for(i=n-1;i>=index;i--)
		{
			TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
			initial=RQ[i];
		}
	}

	printf("Total head movement is %d:-\n",TotalHeadMoment);
	return 0;
}


//MPI SUM

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ARRAY_SIZE 1000

int main(int argc, char* argv[]) {
    int rank, size;
    int numbers[ARRAY_SIZE];
    int local_sum = 0, global_sum = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        srand(time(NULL));
        for (int i = 0; i < ARRAY_SIZE; i++) {
            numbers[i] = rand() % 1000;
        }
    }

    MPI_Bcast(numbers, ARRAY_SIZE, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = rank; i < ARRAY_SIZE; i += size) {
        local_sum += numbers[i];
    }

    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Global sum: %d\n", global_sum);
    }

    MPI_Finalize();
    return 0;
}



