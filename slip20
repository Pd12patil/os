
//SCAN

#include<stdio.h>
#include<stdlib.h>
int main()
{
          int RQ[100],i,j,n,thm=0,initial,size,move;
          printf("Enter the no.of Request :-\n");
          scanf("%d",&n);
          printf("Enter the Request Sequence :-\n");
          for(i=0; i<n; i++)
          scanf("%d",&RQ[i]);
          printf("Ennter the initial head possition :-\n");
          scanf("%d",&initial);
          printf("Enter the total disk size :-\n");
          scanf("%d",&size);
          printf("Ennter the head movement direction for high 1 and for low  0 :-\n");
          scanf("%d",&move);
          for(i=0; i<n; i++)
          {
                for(j=0; j<n-i-1; j++)
                {
                        if(RQ[j]>RQ[j+1])
                        {
                                int temp;
                                temp=RQ[j];
                                RQ[j]=RQ[j+1];
                                RQ[j+1]=temp;
                        }
                }
          }
          
          int index;
          for(i=0; i<n; i++)
          {
                  if(initial<RQ[i])
                  {
                          index=i;
                          break;
                  }
          }
          if(move==1)
          {
        for(i=index;i<n;i++)
        {
            thm=thm+abs(RQ[i]-initial);
            initial=RQ[i];
        } 
        thm=thm+abs(size-RQ[i-1]-1);
        initial = size-1;
        for(i=index-1;i>=0;i--)
        {
             thm=thm+abs(RQ[i]-initial);
             initial=RQ[i];
            
        }
    }
    else
    {
        for(i=index-1;i>=0;i--)
        {
            thm=thm+abs(RQ[i]-initial);
            initial=RQ[i];
        }
        thm=thm+abs(RQ[i+1]-0);
        initial =0;
        for(i=index;i<n;i++)
        {
             thm=thm+abs(RQ[i]-initial);
             initial=RQ[i];
            
        }
    }
    
    printf("Total head movement is %d :-\n",thm);
    return 0;
}



//MPI MAX

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#define ARRAY_SIZE 1000

int main(int argc, char* argv[]) {
    int rank, size;
    int numbers[ARRAY_SIZE];
    int local_min, local_max, global_min, global_max;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        srand(time(NULL));
        for (int i = 0; i < ARRAY_SIZE; i++) {
            numbers[i] = rand() % 1000;
        }
    }

    MPI_Bcast(numbers, ARRAY_SIZE, MPI_INT, 0, MPI_COMM_WORLD);

    local_min = local_max = numbers[0];
    for (int i = rank; i < ARRAY_SIZE; i += size) {
        if (numbers[i] < local_min) {
            local_min = numbers[i];
        }
        if (numbers[i] > local_max) {
            local_max = numbers[i];
        }
    }

    MPI_Reduce(&local_min, &global_min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
    MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Global min: %d\n", global_min);
        printf("Global max: %d\n", global_max);
    }

    MPI_Finalize();
    return 0;
}



